{{isPermitted 'ADD_ENTITY'}}
-- add entity
DO $$
BEGIN
  BEGIN
    INSERT INTO fby_entity (name, version, description) VALUES
    ({{literal name}}, {{literal version}}, {{literal description}});
  EXCEPTION
    WHEN unique_violation
    THEN RAISE EXCEPTION 'Entity '{{literal name (v version)}}' already exists';
  END;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE {{identifier (table name version)}} (
  fby_frame_id INTEGER PRIMARY KEY REFERENCES fby_data_frame (id),
  {{#fields}}
  {{identifier name}} {{validateType type}},
  {{/fields}}
  {{unique this}}{{#if checks}},{{/if}}
  {{#each checks}}
  {{check @key this}}{{#unless @last}},{{/unless}}
  {{/each}}
);

CREATE FUNCTION {{identifier (aggregate name version)}}(p_change_set_id INTEGER) RETURNS TABLE (
  {{#fields}}
  {{identifier name}} {{validateType type}}{{#unless @last}},{{/unless}}
  {{/fields}}
)
AS $$
BEGIN
  RETURN QUERY
  WITH aggregated AS (
    SELECT
      DISTINCT ON ({{#identified_by}}{{identifier name}}{{#unless @last}},{{/unless}}{{/identified_by}})
      f.action AS fby_action,
      {{#fields}}x.{{identifier name}}{{#unless @last}},
      {{/unless}}{{/fields}}
    FROM
      fby_data_frame f
    INNER JOIN fby_entity e ON e.id = f.entity_id
    INNER JOIN {{identifier (table name version)}} x ON x.fby_frame_id = f.id
    WHERE e.name = {{literal name}}
      AND e.version = {{literal version}}
      AND f.change_set_id <= p_change_set_id
    ORDER BY
      {{#identified_by}}x.{{identifier name}} ASC,
      {{/identified_by}}
      x.fby_frame_id DESC
  )
  SELECT {{#fields}}
    a.{{identifier name}}{{#unless @last}},{{/unless}}{{/fields}}
  FROM aggregated a
  WHERE a.fby_action <> 'DELETE';
END;
$$ LANGUAGE plpgsql;
