START TRANSACTION;

{{#define_enums}}
CREATE TYPE {{name}} AS ENUM (
  {{#values}}
  '{{this}}'{{#unless @last}},{{/unless}}
  {{/values}}
);
{{/define_enums}}

{{#define_entities}}
INSERT INTO rdf_entity (name, version) VALUES ('{{name}}', {{version}});

CREATE TABLE {{name}}_v{{version}} (
  rdf_frame_id INTEGER PRIMARY KEY REFERENCES rdf_data_frame (id),
  {{#fields}}
  {{name}} {{type}},
  {{/fields}}
  CONSTRAINT {{name}}_frame_id_{{#identified_by}}{{name}}_{{#if @last}}uniq{{/if}}{{/identified_by}} UNIQUE (rdf_frame_id, {{#identified_by}}{{name}}{{/identified_by}}){{#if checks}},{{/if}}
  {{#each checks}}
  CONSTRAINT {{@key}}_chk CHECK ({{{this}}}){{#unless @last}},{{/unless}}
  {{/each}}
);

CREATE FUNCTION get_{{name}}_v{{version}}_aggregate(
  p_change_set_id INTEGER
) RETURNS TABLE (
  rdf_action rdf_action_type,
  {{#fields}}
  {{name}} {{type}}{{#unless @last}},{{/unless}}
  {{/fields}}
)
AS $$
BEGIN
  RETURN QUERY
  SELECT
    DISTINCT ON ({{#identified_by}}{{name}}{{#unless @last}},{{/unless}}{{/identified_by}})
    f.action AS rdf_action,
    {{#fields}}
    x.{{name}}{{#unless @last}},{{/unless}}
    {{/fields}}
  FROM
    rdf_data_frame f
  INNER JOIN rdf_entity e ON e.id = f.entity_id
  INNER JOIN {{name}}_v{{version}} x ON x.rdf_frame_id = f.id
  WHERE e.name = '{{name}}' AND e.version = {{version}}
    AND f.change_set_id <= p_change_set_id
  ORDER BY
    {{#identified_by}}x.{{name}}{{/identified_by}} ASC,
    x.rdf_frame_id DESC;
END;
$$ LANGUAGE plpgsql;

{{/define_entities}}

{{#add_projections}}

DO $$

DECLARE
  v_projection_id INTEGER;
  v_entity_id INTEGER;

BEGIN
  INSERT INTO rdf_projection (name, version) VALUES
    ('{{name}}', {{version}}){{#unless @last}}),{{/unless}}
  RETURNING id INTO v_projection_id;

  {{#dependencies}}
  SELECT id INTO v_entity_id FROM rdf_entity WHERE name = '{{name}}' AND version = {{version}};

  INSERT INTO rdf_projection_entity (projection_id, entity_id) VALUES
    (v_projection_id, v_entity_id);

  {{/dependencies}}
END;
$$ LANGUAGE plpgsql;

{{/add_projections}}

{{#add_hooks}}
DO $$

DECLARE
  v_projection_id INTEGER;

BEGIN
  SELECT id INTO v_projection_id FROM rdf_projection WHERE name = '{{projection}}' AND version = {{version}};
  INSERT INTO rdf_hook (projection_id, event) VALUES (v_projection_id, '{{event}}');
END;
$$ LANGUAGE plpgsql;

{{/add_hooks}}

{{#add_change_set}}
DO $$
  DECLARE
    v_change_set_id INTEGER;
    v_entity_id INTEGER;
    v_frame_id INTEGER;
  BEGIN
    INSERT INTO rdf_change_set (effective_from, notes, last_modified, entity_tag) VALUES
    ('{{effective_from}}', '{{notes}}', now(), encode(gen_random_bytes(10), 'hex'))
    RETURNING id INTO v_change_set_id;

    {{#frames}}
    {{#data}}
    SELECT id INTO v_entity_id FROM rdf_entity WHERE name = '{{../entity}}' AND version = {{../version}};

    INSERT INTO rdf_data_frame (change_set_id, entity_id, action) VALUES
      (v_change_set_id, v_entity_id, '{{../action}}')
    RETURNING id INTO v_frame_id;

    INSERT INTO {{../entity}}_v{{../version}} (rdf_frame_id, {{#xkeys .}}{{key}}{{#unless isLast}}, {{/unless}}{{/xkeys}}) VALUES
      (v_frame_id, {{#xvalues .}}'{{value}}'{{#unless isLast}}, {{/unless}}{{/xvalues}});
    {{/data}}

    PERFORM rdf_notify('{{entity}}', {{version}});

    {{/frames}}

  END;
$$ LANGUAGE plpgsql;

{{/add_change_set}}

END TRANSACTION;

